import os

def removeDanglingImages(client):
    images = client.images.list() #remove all the dangling images 
    for image in images:
        if not image.tags:
            client.images.remove(image.id, force=True)
    for container in client.containers.list(all=True):
        if not container.image.tags:
            container.remove()

def clerAllContainers(client):
    for container in client.containers.list(all=True): #create a loop for for close the container when the GUI is closed

        container.stop()
        print(container.name +" container stopped")
        container.remove()
        print(container.name + "container removed")
    try:
        os.remove('metrics.csv')
        print(f"Il file metrics è stato eliminato con successo.")
    except OSError as e:
        print(f"Si è verificato un errore durante l'eliminazione del file: {e}")

def verify_container_status(containers):
    f = False
    for container in containers:
        if container.status != "running":
            f = True
    return f

def get_unused_container(all_containers):
    for container in all_containers:
        # Verifica se il container non sta eseguendo
        if container.status != 'running':
            return container
    return None

def retrieve_containers_offline(containers):
    offline_containers = []
    for container in containers:
        if container.status == "exited":
            offline_containers.append(container)
    return offline_containers